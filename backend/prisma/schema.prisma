generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  clerkUserId String
  email       String
  firstName   String
  lastName    String
  workflows   Workflow[]
  templates   Template[]
  timestamp   DateTime   @default(now())
}

model Workflow {
  id           String        @id @default(uuid())
  triggerId    String
  userId       Int
  name         String        @default("Untitled")
  trigger      Trigger?
  actions      Action[]
  workflowRuns WorkflowRun[]
  user         User          @relation(fields: [userId], references: [id])
  timestamp    DateTime      @default(now())
}

model Trigger {
  id         String           @id @default(uuid())
  workflowId String           @unique
  triggerId  String
  metadata   Json             @default("{}")
  type       AvailableTrigger @relation(fields: [triggerId], references: [id])
  workflow   Workflow         @relation(fields: [workflowId], references: [id])
  webhookKey WebhookKey?
  timestamp  DateTime         @default(now())
}

model Action {
  id           String          @id @default(uuid())
  workflowId   String
  workflow     Workflow        @relation(fields: [workflowId], references: [id])
  actionId     String
  metadata     Json            @default("{}")
  type         AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int             @default(0)
  timestamp    DateTime        @default(now())
}

model AvailableAction {
  id        String   @id @default(uuid())
  name      String
  actions   Action[]
  image     String
  timestamp DateTime @default(now())
}

model AvailableTrigger {
  id        String    @id @default(uuid())
  name      String
  triggers  Trigger[]
  image     String
  timestamp DateTime  @default(now())
}

model WorkflowRun {
  id         String             @id @default(uuid())
  workflowId String
  status     String             @default("pending")
  metadata   Json
  workflow   Workflow           @relation(fields: [workflowId], references: [id])
  runOutbox  WorkflowRunOutbox?
  timestamp  DateTime           @default(now())
}

model WorkflowRunOutbox {
  id            String      @id @default(uuid())
  workflowRunId String      @unique
  workflowRun   WorkflowRun @relation(fields: [workflowRunId], references: [id])
  timestamp     DateTime    @default(now())
}

model WebhookKey {
  id        String   @id @default(uuid())
  secretKey String   @unique
  triggerId String   @unique
  trigger   Trigger  @relation(fields: [triggerId], references: [id])
  timestamp DateTime @default(now())
}

model Template {
  id              String           @id @default(uuid())
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  preTemplateId   String           @unique
  preTemplate     PreTemplate      @relation(fields: [preTemplateId], references: [id])
  name            String           @default("Untitled template")
  actions         TemplateAction[]
  templateResults TemplateResult[]
}

model TemplateResult {
  id         String   @id @default(uuid())
  templateId String   @unique
  template   Template @relation(fields: [templateId], references: [id])
  status     String   @default("pending")
  metadata   Json
  timestamp  DateTime @default(now())
}

model PreTemplate {
  id                       String                    @id @default(uuid())
  name                     String
  description              String
  template                 Template?
  availableTemplateActions AvailableTemplateAction[]
}

model AvailableTemplateAction {
  id            String           @id @default(uuid())
  preTemplateId String
  preTemplate   PreTemplate      @relation(fields: [preTemplateId], references: [id])
  name          String
  image         String
  actions       TemplateAction[]
}

model TemplateAction {
  id           String                  @id @default(uuid())
  templateId   String
  template     Template                @relation(fields: [templateId], references: [id])
  actionId     String                  @unique
  type         AvailableTemplateAction @relation(fields: [actionId], references: [id])
  metadata     Json                    @default("{}")
  sortingOrder Int                     @default(0)
  timestamp    DateTime                @default(now())
}

/**
 * blog scraper - url of the blog
 * llm model - system prompt and model name
 * google doc - google credentials or the google doc ID
 */
